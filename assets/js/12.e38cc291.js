(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{597:function(s,t,a){s.exports=a.p+"assets/img/01-1.67a42368.jpg"},598:function(s,t,a){s.exports=a.p+"assets/img/01-2.a69e9727.jpg"},599:function(s,t,a){s.exports=a.p+"assets/img/01-3.ce9699d7.jpg"},600:function(s,t,a){s.exports=a.p+"assets/img/01-4.09e16a5c.jpg"},601:function(s,t,a){s.exports=a.p+"assets/img/01-5.d2e2a1b5.jpg"},602:function(s,t,a){s.exports=a.p+"assets/img/01-6.f9c11eee.jpg"},603:function(s,t,a){s.exports=a.p+"assets/img/01-7.dfece5e3.jpg"},604:function(s,t,a){s.exports=a.p+"assets/img/01-8.91957452.jpg"},605:function(s,t,a){s.exports=a.p+"assets/img/01-9.bdb7337f.jpg"},716:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("多数的网站不需要大量计算，程序花费的时间主要集中在磁盘 I/O 和网络 I/O 上面")])]),s._v(" "),n("p",[s._v("SSD读取很快，但和CPU处理指令的速度比起来也不在一个数量级上，而且网络上一个数据包来回的时间更慢：\n"),n("img",{attrs:{src:a(597),alt:"image"}})]),s._v(" "),n("p",[s._v("一个数据包来回的延迟平均320ms(我网速慢，ping国内网站会更快)，这段时间内一个普通 cpu 执行几千万个周期应该没问题")]),s._v(" "),n("p",[s._v("因此异步IO就要发挥作用了，比如用多线程，如果用 Java 去读一个文件，这是一个阻塞的操作，在等待数据返回的过程中什么也干不了，因此就开一个新的线程来处理文件读取，读取操作结束后再去通知主线程。")]),s._v(" "),n("p",[s._v("这样虽然行得通，但是代码写起来比较麻烦。像 Node.js V8 这种无法开一个线程的怎么办？")]),s._v(" "),n("h2",{attrs:{id:"_1-什么是node-js进程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是node-js进程"}},[s._v("#")]),s._v(" 1. 什么是Node.js进程")]),s._v(" "),n("p",[s._v("我们可以先默默地回答下下面的9个问题，是否都清楚呢?\n"),n("img",{attrs:{src:a(598),alt:"image"}})]),s._v(" "),n("h3",{attrs:{id:"_1-1-异步io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-异步io"}},[s._v("#")]),s._v(" 1.1 异步IO")]),s._v(" "),n("p",[s._v("异步IO是指操作系统提供的IO（数据进出）的能力，比如键盘输入，对应到显示器上会有专门的数据输出接口，这就是我们生活中可见的IO能力；这个接口在向下会进入到操作系统这个层面，在操作系统中，会提供诸多的能力，比如：磁盘的读写，DNS的查询，数据库的连接啊，网络请求的处理，等等；")]),s._v(" "),n("p",[s._v("在不同的操作系统层面，表现的不一致。有的是异步非阻塞的；有的是同步的阻塞的，无论如何，我们都可以看做是上层应用于下层系统之间的数据交互；上层依赖于下层，但是反过来，上层也可以对下层提供的这些能力进行改造；如果这种操作是异步的，非阻塞的，那么这种就是异步非阻塞的异步IO模型；如果是同步的阻塞的，那么就是同步IO模型；")]),s._v(" "),n("p",[n("strong",[s._v("koa")]),s._v("就是一个上层的web服务框架，全部由js实现，他有操作系统之间的交互，全部通过nodejs来实现；如nodejs的 readFile就是一个异步非阻塞的接口，readFileSync就是一个同步阻塞接口；到这里上面三个问题基本回答完毕；")]),s._v(" "),n("h3",{attrs:{id:"_1-2-时间循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-时间循环"}},[s._v("#")]),s._v(" 1.2 时间循环")]),s._v(" "),n("p",[n("strong",[s._v("事件循环")]),s._v("是指Node.js执行非阻塞I/O操作，尽管JavaScript是单线程的,但由于大多数内核都是多线程的，node.js会尽可能将操作装载到系统内核。因此它们可以处理在后台执行的多个操作。当其中一个操作完成时，内核会告诉Node.js，以便node.js可以将相应的回调添加到轮询队列中以最终执行。")]),s._v(" "),n("h3",{attrs:{id:"_1-3-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-总结"}},[s._v("#")]),s._v(" 1.3 总结")]),s._v(" "),n("p",[s._v("nodejs是单线程执行的，同时它又是基于"),n("strong",[s._v("事件驱动")]),s._v("的"),n("strong",[s._v("非阻塞IO")]),s._v("编程模型。这就使得我们不用等待异步操作结果返回，就可以继续往下执行代码。当异步事件触发之后，就会通知主线程，主线程执行相应事件的回调。")]),s._v(" "),n("h2",{attrs:{id:"_2-nodejs-架构分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-nodejs-架构分析"}},[s._v("#")]),s._v(" 2. Nodejs 架构分析")]),s._v(" "),n("p",[s._v("说道 Nodejs 架构, 首先要直到 Nodejs 与 V8 和 libUV 的关系和作用:")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("V8")]),s._v(": 执行 JS 的引擎. 也就是翻译 JS. 包括我们熟悉的编译优化, 垃圾回收等等.")]),s._v(" "),n("li",[n("strong",[s._v("libUV")]),s._v(": 提供 async I/O, 提供消息循环. 可见, 是操作系统 API 层的一个抽象层.")])]),s._v(" "),n("p",[s._v("那么 Nodejs 如何组织它们呢?")]),s._v(" "),n("p",[n("img",{attrs:{src:a(599),alt:"image"}})]),s._v(" "),n("h3",{attrs:{id:"_2-1-application-code-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-application-code-js"}},[s._v("#")]),s._v(" 2.1 Application Code(JS)")]),s._v(" "),n("blockquote",[n("p",[s._v("框架代码以及用户代码即我们编写的应用程序代码. npm包. nodejs内置的js模块等，我们日常工作中的大部分时间都是编写这个层面的代码。")])]),s._v(" "),n("h3",{attrs:{id:"_2-2-binding代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-binding代码"}},[s._v("#")]),s._v(" 2.2 binding代码")]),s._v(" "),n("blockquote",[n("p",[s._v("binding代码或者三方插件（js 或 C/C++ 代码）胶水代码.")])]),s._v(" "),n("p",[s._v("能够让js调用C/C++的代码。可以将其理解为一个桥，桥这头是js，桥那头是C/C++，通过这个桥可以让js调用C/C++。\n在nodejs里，胶水代码的主要作用是把nodejs底层实现的C/C++库暴露给js环境。\n三方插件是我们自己实现的C/C++库，同时需要我们自己实现胶水代码，将js和C/C++进行桥接。")]),s._v(" "),n("p",[s._v("Nodejs 通过一层 C++ Binding, 把 JS 传入 V8, V8 解析后交给 libUV 发起 asnyc I/O, 并等待消息循环调度.")]),s._v(" "),n("h3",{attrs:{id:"_2-3-底层库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-底层库"}},[s._v("#")]),s._v(" 2.3 底层库")]),s._v(" "),n("blockquote",[n("p",[s._v("nodejs的依赖库，包括大名鼎鼎的V8. libuv。")])]),s._v(" "),n("ul",[n("li",[s._v("V8： 我们都知道，是google开发的一套高效javascript运行时，nodejs能够高效执行 js 代码的很大原因主要在它。")]),s._v(" "),n("li",[s._v("libuv：是用C语言实现的一套异步功能库，nodejs高效的异步编程模型很大程度上归功于libuv的实现，而libuv则是我们今天重点要分析的。")])]),s._v(" "),n("p",[s._v("还有一些其他的依赖库")]),s._v(" "),n("ul",[n("li",[s._v("http-parser：负责解析http响应")]),s._v(" "),n("li",[s._v("openssl：加解密")]),s._v(" "),n("li",[s._v("c-ares：dns解析")]),s._v(" "),n("li",[s._v("npm：nodejs包管理器")])]),s._v(" "),n("h2",{attrs:{id:"_3-libuv-架构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-libuv-架构"}},[s._v("#")]),s._v(" 3. libuv 架构")]),s._v(" "),n("p",[s._v("我们知道，nodejs实现异步机制的核心便是libuv，libuv承担着nodejs与文件. 网络等异步任务的沟通桥梁，下面这张图让我们对libuv有个大概的印象：\n"),n("img",{attrs:{src:a(600),alt:"image"}})]),s._v(" "),n("p",[s._v("这是libuv官网的一张图，很明显，nodejs的网络I/O. 文件I/O. DNS操作. 还有一些用户代码都是在 libuv 工作的。 既然谈到了异步，那么我们首先归纳下nodejs里的异步事件：")]),s._v(" "),n("h3",{attrs:{id:"_3-1-非-i-o操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-非-i-o操作"}},[s._v("#")]),s._v(" 3.1 非 I/O操作：")]),s._v(" "),n("p",[s._v("定时器（setTimeout，setInterval）")]),s._v(" "),n("ul",[n("li",[s._v("microtask（promise）")]),s._v(" "),n("li",[s._v("process.nextTick")]),s._v(" "),n("li",[s._v("setImmediate")]),s._v(" "),n("li",[s._v("DNS.lookup")])]),s._v(" "),n("h3",{attrs:{id:"_3-2-i-o操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-i-o操作"}},[s._v("#")]),s._v(" 3.2 I/O操作：")]),s._v(" "),n("ul",[n("li",[s._v("网络I/O\n对于网络I/O，各个平台的实现机制不一样，linux 是 epoll 模型，类 unix 是 kquene . windows 下是高效的 IOCP 完成端口. SunOs 是 event ports，libuv 对这几种网络I/O模型进行了封装。")]),s._v(" "),n("li",[s._v("文件I/O 与DNS操作")])]),s._v(" "),n("p",[s._v("libuv内部还维护着一个默认4个线程的线程池，这些线程负责执行文件I/O操作. DNS操作. 用户异步代码。当 js 层传递给 libuv 一个操作任务时，libuv 会把这个任务加到队列中。之后分两种情况：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("线程池中的线程都被占用的时候，队列中任务就要进行排队等待空闲线程。")])]),s._v(" "),n("li",[n("p",[s._v("线程池中有可用线程时，从队列中取出这个任务执行，执行完毕后，线程归还到线程池，等待下个任务。同时以事件的方式通知event-loop，event-loop接收到事件执行该事件注册的回调函数。")])])]),s._v(" "),n("blockquote",[n("p",[s._v("当然，如果觉得4个线程不够用，可以在nodejs启动时，设置环境变量UV_THREADPOOL_SIZE来调整，出于系统性能考虑，libuv 规定可设置线程数不能超过128个。")])]),s._v(" "),n("h2",{attrs:{id:"_4-nodejs-线程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-nodejs-线程模型"}},[s._v("#")]),s._v(" 4 Nodejs 线程模型")]),s._v(" "),n("p",[s._v("node.js启动过程可以分为以下步骤：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("调用platformInit方法 ，初始化 nodejs 的运行环境。")])]),s._v(" "),n("li",[n("p",[s._v("调用 performance_node_start 方法，对 nodejs 进行性能统计。")])]),s._v(" "),n("li",[n("p",[s._v("openssl设置的判断。")])]),s._v(" "),n("li",[n("p",[s._v("调用v8_platform.Initialize，初始化 libuv 线程池。")])]),s._v(" "),n("li",[n("p",[s._v("调用 V8::Initialize，初始化 V8 环境。")])]),s._v(" "),n("li",[n("p",[s._v("创建一个nodejs运行实例。")])]),s._v(" "),n("li",[n("p",[s._v("启动上一步创建好的实例。")])]),s._v(" "),n("li",[n("p",[s._v("开始执行js文件，同步代码执行完毕后，进入事件循环。")])]),s._v(" "),n("li",[n("p",[s._v("在没有任何可监听的事件时，销毁 nodejs 实例，程序执行完毕。")])])]),s._v(" "),n("p",[s._v("以上就是 nodejs 执行一个js文件的全过程。接下来着重介绍第八个步骤，事件循环。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(601),alt:"image"}})]),s._v(" "),n("p",[s._v("Nodejs 完全是单线程的. 从进程启动后, 由主线程加载我们的 js 文件(上图中 main.js), 然后进入消息循环. 可见对于 js 程序而言, 完整运行在单线程之中.")]),s._v(" "),n("p",[n("img",{attrs:{src:a(602),alt:"image"}})]),s._v(" "),n("p",[s._v("但并不是说 Node 进程只有一个线程. 正如 Node.js event loop workflow & lifecycle in low level 中所说:在 libUV 这一层实际上是有个线程池辅助完成一些工作的.")]),s._v(" "),n("h3",{attrs:{id:"_4-1-细说消息循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-细说消息循环"}},[s._v("#")]),s._v(" 4.1 细说消息循环")]),s._v(" "),n("p",[s._v("再来看一下 JS 中的消息循环部分:\n"),n("img",{attrs:{src:a(603),alt:"image"}})]),s._v(" "),n("p",[s._v("Nodejs 将消息循环又细分为 6 个阶段(官方叫做 Phase), 每个阶段都会有一个类似于队列的结构, 存储着该阶段需要处理的回调函数. 我们来看一下这 6 个 Phase 的作用,这六个阶段的核心代码如下：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv_run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uv_loop_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uv_run_mode mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" ran_pending"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断事件循环是否存活。")]),s._v("\n  r "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__loop_alive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果没有存活，更新时间戳")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果事件循环存活，并且事件循环没有停止。")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新当前时间戳")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行 timers 队列")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行由于上个循环未执行完，并被延迟到这个循环的I/O 回调。")]),s._v("\n    ran_pending "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_pending")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//内部调用，用户不care，忽略")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_idle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//内部调用，用户不care，忽略")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_prepare")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\n    timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" UV_RUN_ONCE "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("ran_pending"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" UV_RUN_DEFAULT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//计算距离下一个timer到来的时间差。")]),s._v("\n      timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv_backend_timeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//进入 轮询 阶段，该阶段轮询I/O事件，有则执行，无则阻塞，直到超出timeout的时间。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__io_poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//进入check阶段，主要执行 setImmediate 回调。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_check")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//进行close阶段，主要执行 **关闭** 事件")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_closing_handles")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" UV_RUN_ONCE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//更新当前时间戳")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//再次执行timers回调。")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断当前事件循环是否存活。")]),s._v("\n    r "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__loop_alive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" UV_RUN_ONCE "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" UV_RUN_NOWAIT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* The if statement lets gcc compile it to a conditional store. Avoids\n   * dirtying a cache line.\n   */")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("stop_flag "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" r"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br")])]),n("h3",{attrs:{id:"_4-2-timer-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-timer-phase"}},[s._v("#")]),s._v(" 4.2 Timer Phase")]),s._v(" "),n("p",[s._v("这是消息循环的第一个阶段, 用一个 "),n("strong",[s._v("for")]),s._v(" 循环处理所有 "),n("strong",[s._v("setTimeout")]),s._v(" 和 "),n("strong",[s._v("setInterval")]),s._v(" 的回调. 核心代码如下：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__run_timers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uv_loop_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("heap_node")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  uv_timer_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//取出定时器堆中超时时间最近的定时器句柄")]),s._v("\n    heap_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("heap_min")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("heap")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("timer_heap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("heap_node "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    handle "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("container_of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" uv_timer_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" heap_node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断最近的一个定时器句柄的超时时间是否大于当前时间，如果大于当前时间，说明还未超时，跳出循环。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("handle"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 停止最近的定时器句柄")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv_timer_stop")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断定时器句柄类型是否是repeat类型，如果是，重新创建一个定时器句柄。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv_timer_again")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//执行定时器句柄绑定的回调函数")]),s._v("\n    handle"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("timer_cb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("handle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("这些回调被保存在一个最小堆(min heap) 中. 这样引擎只需要每次判断头元素, 如果符合条件就拿出来执行, 直到遇到一个不符合条件或者队列空了, 才结束 Timer Phase.")]),s._v(" "),n("p",[s._v("Timer Phase 中判断某个回调是否符合条件的方法也很简单. 消息循环每次进入 Timer Phase 的时候都会保存一下当时的系统时间,然后只要看上述最小堆中的回调函数设置的启动时间是否超过进入 Timer Phase 时保存的时间, 如果超过就拿出来执行.")]),s._v(" "),n("p",[s._v("此外, Nodejs 为了防止某个 Phase 任务太多, 导致后续的 Phase 发生饥饿的现象, 所以消息循环的每一个迭代(iterate) 中, 每个 Phase 执行回调都有个最大数量. 如果超过数量的话也会强行结束当前 Phase 而进入下一个 Phase. 这一条规则适用于消息循环中的每一个 Phase.")]),s._v(" "),n("h3",{attrs:{id:"_4-3-pending-i-o-callback-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-pending-i-o-callback-phase"}},[s._v("#")]),s._v(" 4.3 Pending I/O Callback Phase")]),s._v(" "),n("p",[s._v("这一阶段是执行你的 "),n("strong",[s._v("fs.read")]),s._v(", "),n("strong",[s._v("socket")]),s._v(" 等 IO 操作的回调函数, 同时也包括各种 error 的回调.")]),s._v(" "),n("h3",{attrs:{id:"_4-4-idle-prepare-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-idle-prepare-phase"}},[s._v("#")]),s._v(" 4.4 Idle, Prepare Phase")]),s._v(" "),n("p",[s._v("据说是内部使用, 所以我们也不在这里过多讨论.")]),s._v(" "),n("h3",{attrs:{id:"_4-5-poll-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-poll-phase"}},[s._v("#")]),s._v(" 4.5 Poll Phase")]),s._v(" "),n("p",[s._v("这是整个消息循环中最重要的一个 Phase, 作用是等待异步请求和数据(原文: "),n("em",[s._v("accepts new incoming connections (new socket establishment etc) and data (file read etc)")]),s._v(").\n说它最重要是因为它支撑了整个消息循环机制.")]),s._v(" "),n("p",[s._v("Poll Phase 首先会执行 "),n("strong",[s._v("watch_queue")]),s._v(" 队列中的 IO 请求, 一旦 watch_queue 队列空, 则整个消息循环就会进入 sleep , 从而等待被内核事件唤醒. 源码在这里:")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__io_poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uv_loop_t"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*一连串的变量初始化*/")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断是否有事件发生    ")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("nfds "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断观察者队列是否为空，如果为空，则返回")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("QUEUE_EMPTY")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("watcher_queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  nevents "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 观察者队列不为空")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("QUEUE_EMPTY")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("watcher_queue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    取出队列头的观察者对象\n    取出观察者对象感兴趣的事件并监听。\n    */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("省略一些代码\n    w"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("events "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" w"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("pevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果有超时时间，将当前时间赋给base变量")]),s._v("\n  base "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 本轮执行监听事件的最大数量")]),s._v("\n  count "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("48")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Benchmarks suggest this gives the best throughput. */")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//进入监听循环")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" nevents "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 有超时时间的话，初始化spec")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      spec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tv_sec "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      spec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("tv_nsec "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pset "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_sigmask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SIG_BLOCK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 监听内核事件，当有事件到来时，即返回事件的数量。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// timeout 为监听的超时时间，超时时间一到即返回。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 我们知道，timeout是传进来得下一个timers到来的时间差，所以，在timeout时间内，event-loop会一直阻塞在此处，直到超时时间到来或者有内核事件触发。")]),s._v("\n    nfds "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("kevent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("backend_fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  nevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ARRAY_SIZE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("spec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pset "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_sigmask")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SIG_UNBLOCK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pset"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Update loop->time unconditionally. It's tempting to skip the update when\n     * timeout == 0 (i.e. non-blocking poll) but there is no guarantee that the\n     * operating system didn't reschedule our process while in the syscall.\n     */")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("SAVE_ERRNO")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("uv__update_time")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果内核没有监听到可用事件，且本次监听有超时时间，则返回。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nfds "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nfds "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("errno "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" EINTR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("abort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("timeout "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* Interrupted by a signal. Update timeout and poll again. */")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("goto")]),s._v(" update_timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    。。。\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//判断事件循环的观察者队列是否为空")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("watchers "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("watchers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("nwatchers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("watchers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("loop"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("nwatchers "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uintptr_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 循环处理内核返回的事件，执行事件绑定的回调函数")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        。。。。\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br")])]),n("p",[n("strong",[s._v("uv__io_poll")]),s._v("阶段源码最长，逻辑最为复杂，可以做个概括，如下： 当js层代码注册的事件回调都没有返回的时候，事件循环会阻塞在poll阶段。看到这里，你可能会想了，会永远阻塞在此处吗？当然 Poll Phase 不能一直等下去.")]),s._v(" "),n("p",[s._v("它有着精妙的设计. 简单来说,")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("它首先会判断后面的 "),n("strong",[s._v("Check Phase")]),s._v(" 以及 "),n("strong",[s._v("Close Phase")]),s._v(" 是否还有等待处理的回调. 如果有, 则不等待, 直接进入下一个 Phase.")])]),s._v(" "),n("li",[n("p",[s._v("如果没有其他回调等待执行, 它会给 "),n("strong",[s._v("epoll")]),s._v(" 这样的方法设置一个 timeout.")])])]),s._v(" "),n("blockquote",[n("p",[s._v("可以猜一下, 这个 timeout 设置为多少合适呢? 答案就是 Timer Phase 中最近要执行的回调启动时间到现在的差值, 假设这个差值是 detal. 因为 Poll Phase 后面没有等待执行的回调了. 所以这里最多等待 delta 时长, 如果期间有事件唤醒了消息循环, 那么就继续下一个 Phase 的工作; 如果期间什么都没发生, 那么到了 timeout 后, 消息循环依然要进入后面的 Phase, 让下一个迭代的 Timer Phase 也能够得到执行.\nNodejs 就是通过 Poll Phase, 对 IO 事件的等待和内核异步事件的到达来驱动整个消息循环的.")])]),s._v(" "),n("h3",{attrs:{id:"_4-6-check-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-check-phase"}},[s._v("#")]),s._v(" 4.6 Check Phase")]),s._v(" "),n("p",[s._v("接下来是 Check Phase. 这个阶段只处理 "),n("strong",[s._v("setImmediate")]),s._v(" 的回调函数."),n("br"),s._v("\n那么为什么这里要有专门一个处理 "),n("strong",[s._v("setImmediate")]),s._v(" 的 Phase 呢? 简单来说, 是因为 Poll Phase 阶段可能设置一些回调, 希望在 Poll Phase 后运行. 所以在 Poll Phase 后面增加了这个 Check Phase.")]),s._v(" "),n("h3",{attrs:{id:"_4-7-close-callbacks-phase"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-close-callbacks-phase"}},[s._v("#")]),s._v(" 4.7 Close Callbacks Phase")]),s._v(" "),n("p",[s._v("专门处理一些 close 类型的回调. 比如 "),n("code",[s._v("socket.on('close', ...)")]),s._v(". 用于资源清理.")]),s._v(" "),n("h2",{attrs:{id:"_5-node-js事件循环原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-node-js事件循环原理"}},[s._v("#")]),s._v(" 5 Node.js事件循环原理")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("node 的初始化")]),s._v(" "),n("ul",[n("li",[s._v("初始化 node 环境。")]),s._v(" "),n("li",[s._v("执行输入代码。")]),s._v(" "),n("li",[s._v("执行 process.nextTick 回调。")]),s._v(" "),n("li",[s._v("执行 microtasks。")])])]),s._v(" "),n("li",[n("p",[s._v("进入 event-loop")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("进入 timers 阶段")]),s._v(" "),n("ul",[n("li",[s._v("检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。")]),s._v(" "),n("li",[s._v("检查是否有 process.nextTick 任务，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有microtask，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出该阶段。")])])]),s._v(" "),n("li",[n("p",[s._v("进入IO callbacks阶段。")]),s._v(" "),n("ul",[n("li",[s._v("检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段。")]),s._v(" "),n("li",[s._v("检查是否有 process.nextTick 任务，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有microtask，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出该阶段。")])])]),s._v(" "),n("li",[n("p",[s._v("进入 idle，prepare 阶段：")]),s._v(" "),n("p",[s._v("这两个阶段与我们编程关系不大，暂且按下不表。")])]),s._v(" "),n("li",[n("p",[s._v("进入 poll 阶段")]),s._v(" "),n("p",[s._v("首先检查是否存在尚未完成的回调，如果存在，那么分两种情况。")])])]),s._v(" "),n("blockquote",[n("p",[s._v("第一种情况：")])]),s._v(" "),n("ul",[n("li",[s._v("如果有可用回调（可用回调包含到期的定时器还有一些IO事件等），执行所有可用回调。")]),s._v(" "),n("li",[s._v("检查是否有 process.nextTick 回调，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有 microtaks，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出该阶段。")])]),s._v(" "),n("blockquote",[n("p",[s._v("第二种情况：")])]),s._v(" "),n("ul",[n("li",[s._v("如果没有可用回调。")]),s._v(" "),n("li",[s._v("检查是否有 immediate 回调，如果有，退出 poll 阶段。如果没有，阻塞在此阶段，等待新的事件通知。")]),s._v(" "),n("li",[s._v("如果不存在尚未完成的回调，退出poll阶段。")])]),s._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[s._v("进入 check 阶段")])]),s._v(" "),n("ul",[n("li",[s._v("如果有immediate回调，则执行所有immediate回调。")]),s._v(" "),n("li",[s._v("检查是否有 process.nextTick 回调，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有 microtaks，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出 check 阶段")])]),s._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[s._v("进入 closing 阶段。")])]),s._v(" "),n("ul",[n("li",[s._v("如果有immediate回调，则执行所有immediate回调。")]),s._v(" "),n("li",[s._v("检查是否有 process.nextTick 回调，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有 microtaks，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出 closing 阶段")]),s._v(" "),n("li")])])]),s._v(" "),n("p",[n("strong",[s._v("检查是否有活跃的 handles（定时器. IO等事件句柄）")])]),s._v(" "),n("ul",[n("li",[s._v("如果有，继续下一轮循环。")]),s._v(" "),n("li",[s._v("如果没有，结束事件循环，退出程序。")])]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("细心的童鞋可以发现，在事件循环的每一个子阶段退出之前都会按顺序执行如下过程：")]),s._v(" "),n("ul",[n("li",[s._v("检查是否有 process.nextTick 回调，如果有，全部执行。")]),s._v(" "),n("li",[s._v("检查是否有 microtaks，如果有，全部执行。")]),s._v(" "),n("li",[s._v("退出当前阶段。")])]),s._v(" "),n("h2",{attrs:{id:"_6-常见问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-常见问题"}},[s._v("#")]),s._v(" 6 常见问题")]),s._v(" "),n("h3",{attrs:{id:"_6-1-process-nexttick-和-promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-process-nexttick-和-promise"}},[s._v("#")]),s._v(" 6.1 process.nextTick 和 Promise")]),s._v(" "),n("p",[s._v("可以看到, 消息循环队列图中并没有涉及到 process.nextTick 以及 Promise 的回调. 那么这两个回调有什么特殊性呢?")]),s._v(" "),n("p",[s._v("这个队列先保证所有的 process.nextTick 回调, 然后将所有的 Promise 回调追加在后面. 最终在每个 Phase 结束的时候一次性拿出来执行.")]),s._v(" "),n("p",[s._v("此外, 不同于 Phase, process.nextTick 以及 Promise 回调的数量是受限制的. 也就是说, 如果一直往这个队列中加入回调, 那么整个消息循环就会被 “卡住”.\n我们用一张图来看看 process.nextTick 以及 Promise:")]),s._v(" "),n("p",[n("img",{attrs:{src:a(604),alt:"image"}})]),s._v(" "),n("h3",{attrs:{id:"_6-2-settimeout-0-vs-setimmediate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-settimeout-0-vs-setimmediate"}},[s._v("#")]),s._v(" 6.2 setTimeout(…, 0) vs. setImmediate")]),s._v(" "),n("p",[s._v("setTimeout(..., 0)vs. setImmediate 到底谁快?")]),s._v(" "),n("p",[s._v("我们来举个例子直观的感受一下.这是一道经典的 FE 面试题.请问如下代码的输出:")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// index.js")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("答案: 可能是 1 2, 也可能是 2 1")])]),s._v(" "),n("p",[s._v("我们从原理的角度看看这道消息循环的基础问题.首先,Nodejs启动,初始化环境后加载我们的JS代码(index.js).发生了两件事(此时尚未进入消息循环环节):setImmediate 向 Check Phase 中添加了回调 console.log(2); setTimeout 向 Timer Phase 中添加了回调 console.log(1)这时候, 要初始化阶段完毕, 要进入 Nodejs 消息循环了, 如下图:")]),s._v(" "),n("p",[n("img",{attrs:{src:a(605),alt:"image"}})]),s._v(" "),n("p",[s._v("为什么会有两种输出呢? 接下来一步很关键:")]),s._v(" "),n("p",[s._v("当执行到 Timer Phase 时, 会发生两种可能. 因为每一轮迭代刚刚进入 Timer Phase 时会取系统时间保存起来, 以 ms(毫秒) 为最小单位.")]),s._v(" "),n("p",[s._v("如果 Timer Phase 中回调预设的时间 > 消息循环所保存的时间, 则执行 Timer Phase 中的该回调. 这种情况下先输出 1, 直到 Check Phase 执行后,输出2.总的来说, 结果是 1 2.")]),s._v(" "),n("p",[s._v("如果运行比较快, Timer Phase 中回调预设的时间可能刚好等于消息循环所保存的时间, 这种情况下, Timer Phase 中的回调得不到执行, 则继续下一个 Phase. 直到 Check Phase, 输出 2. 然后等下一轮迭代的 Timer Phase, 这时的时间一定是满足 Timer Phase 中回调预设的时间 > 消息循环所保存的时间 , 所以 console.log(1) 得到执行, 输出 1. 总的来说, 结果就是 2 1.")]),s._v(" "),n("p",[s._v("所以, 输出不稳定的原因就取决于进入 Timer Phase 的时间是否和执行 setTimeout 的时间在 1ms 内. 如果把代码改成如下, 则一定会得到稳定的输出:")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("readFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my-file-path.txt'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setImmediate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2 1")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这是因为消息循环在 Pneding I/O Phase 才向 Timer 和 Check 队列插入回调. 这时按照消息循环的执行顺序, Check 一定在 Timer 之前执行, 如下图:")]),s._v(" "),n("h3",{attrs:{id:"_6-3-settimeout-0-是否可以代替-setimmediate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-settimeout-0-是否可以代替-setimmediate"}},[s._v("#")]),s._v(" 6.3 setTimeout(…, 0) 是否可以代替 setImmediate")]),s._v(" "),n("p",[s._v("从性能角度讲, setTimeout 的处理是在 Timer Phase, 其中 min heap 保存了 timer 的回调, 因此每执行一个回调的同时都会涉及到堆调整. 而 setImmediate 仅仅是清空一个队列. 效率自然会高很多.")]),s._v(" "),n("p",[s._v("再从执行时机上讲. setTimeout(..., 0) 和 setImmediate 完全属于两个 Phase.")])])}),[],!1,null,null,null);t.default=e.exports}}]);