(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{679:function(t,s,e){"use strict";e.r(s);var a=e(7),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("RouterLink",{attrs:{to:"/interview/"}},[t._v("返回主页")])],1),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("1.简单对比 git pull 和 git pull --rebase 的使用")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git pull = git fetch + git merge\ngit pull --rebase = git fetch + git rebase")]),t._v(" "),e("p",[t._v("解析：现在来看看"),e("a",{attrs:{href:"https://www.cnblogs.com/kevingrace/p/5896706.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("git merge 和 git rebase 的区别"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/997",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("2.什么时候使用“git rebase”代替“git merge”？")])]),t._v(" "),e("p",[t._v("答案：你自己开发分支一直在做，然后你想把主线的修改合到你的分支上，做一次集成，这种情况就用rebase比较好，把你的提交都放在主线修改的头上")]),t._v(" "),e("ol",[e("li",[t._v("rebase会把你当前分支的commit放到公共分支的最后，所以叫做变基。就如同你从公共分支又重新拉出来这个分支一样。")]),t._v(" "),e("li",[t._v("merge会把公共分支和你当前的commit合并在一起，形成一个新的commit提交。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/998",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("3.“拉取请求（pull request）”和“分支（branch）”之间有什么区别？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("分支（branch） 是代码的一个独立版本。")])]),t._v(" "),e("li",[e("p",[t._v("拉取请求（pull request） 是当有人用仓库，建立了自己的分支，做了些修改并合并到该分支（把自己修改应用到别人的代码仓库）。")])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/999",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("4.什么是 Git 复刻（fork）？复刻（fork）、分支（branch）和克隆（clone）之间有什么区别？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("复刻（fork） 是对存储仓库（repository）进行的远程的、服务器端的拷贝，从源头上就有所区别。复刻实际上不是 Git 的范畴。它更像是个政治/社会概念。")])]),t._v(" "),e("li",[e("p",[t._v("克隆（clone） 不是复刻，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。")])]),t._v(" "),e("li",[e("p",[t._v("分支（branch） 是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。")])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1000",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("5.使用过 git cherry-pick，有什么作用？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("命令 git cherry-pick 通常用于把特定提交从存储仓库的一个分支引入到其他分支中。常见的用途是从维护的分支到开发分支进行向前或回滚提交。\n这与其他操作（例如：合并（merge）、变基（rebase））形成鲜明对比，后者通常是把许多提交应用到其他分支中。")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git cherry-pick <commit-hash>\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1001",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("6.git 跟其他版本控制器有啥区别？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("Git比svn快，而且更加的流畅。")]),t._v(" "),e("p",[t._v("Git在本地就可以使用，可以随便保存各种历史记录，不用担心污染服务器。")]),t._v(" "),e("p",[t._v("Git在branch和branch之间切换非常简单。")]),t._v(" "),e("p",[t._v("Git没有被lock不能commit 的情况。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1002",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("7.我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行 git status 时都让这些文件显示出来，我们该如何操作？")])]),t._v(" "),e("p",[t._v("答案：在 Git 工作区的跟目录下创建一个特殊的.gitignore 文件，然后把忽略的文件名编辑进去，Git 就会自动忽略这些文件。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1003",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("8.如何把本地仓库的内容推向一个空的远程仓库？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git init //生成.git 文件\ngit remote add origin 远程仓库地址 // 将本地和远程厂库关联起来\ngit add .\ngit commit -m '提交信息'\ngit push origin master // 将本地代码推送到库上")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1004",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("9.提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("h4",{attrs:{id:"_1-冲突是如何产生的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-冲突是如何产生的"}},[t._v("#")]),t._v(" 1. 冲突是如何产生的")]),t._v(" "),e("p",[t._v("我们都知道，Git 的实现途径是 1 棵树。比如有一个节点树(point1),")]),t._v(" "),e("ul",[e("li",[t._v("我们基于 point1 进行开发，开发出了结点 point2；")]),t._v(" "),e("li",[t._v("我们基于 point1 进行开发，开发出了结点 point3；\n如果我们在 point2 和 point3 内操作了同一类元素，那么势必会导致冲突的存在。\n主要的思想如下图 1 所示:")])]),t._v(" "),e("p",[t._v("point1.js")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("人物甲 更新了版本 2\n代码: poin2.js")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("人物乙 更新了版本 3\n代码: poin3.js")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("场景如下，甲乙都是根据 point.js 文件进行了开发。甲开发出了版本 2，并且提交了代码；乙开发出了版本 3，也需要提交了代码，此时将会报错存在冲突。")]),t._v(" "),e("p",[t._v("为什么呢？因为甲开发完了版本，提交了版本之后，此时远端的代码已经是版本 2 点代码了，而乙是基于版本 1 进行的开发出了版本 3。所以，乙想要提交代码，势必要将自己的代码更新为版本 2 的代码，然后再进行提交，如果存在冲突则解决冲突后提交")]),t._v(" "),e("h4",{attrs:{id:"_2-冲突是如何解决的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-冲突是如何解决的"}},[t._v("#")]),t._v(" 2. 冲突是如何解决的")]),t._v(" "),e("p",[t._v("上面已经详细的说明了冲突时如何产生的，那么又该如何解决冲突呢?")]),t._v(" "),e("p",[t._v("解决冲突通常使用如下的步骤即可:")]),t._v(" "),e("ul",[e("li",[t._v("情况 1 无冲突")])]),t._v(" "),e("p",[t._v("先拉取远端的代码，更新本地代码。然后提交自己的更新代码即可。")]),t._v(" "),e("ul",[e("li",[t._v("情况 2 有冲突")])]),t._v(" "),e("p",[t._v("拉取远端代码。存在冲突，会报错。\n此时我们需要将本地代码暂存起来 stash；\n更新本地代码，将本地代码版本更新和远端的代码一致即可；\n将暂存的代码合并到更新后的代码后，有冲突解决冲突(需要手动进行解决冲突)；\n提交解决冲突后的代码。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1005",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("10.列举工作中常用的几个 git 命令？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git add\ngit status\ngit commit -m\ngit pull\ngit push")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1006",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("11.git提交代码时候写错commit信息后，如何重新设置commit信息？")])]),t._v(" "),e("p",[t._v("答案：可以通过git commit --amend 来对本次commit进行修改。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1007",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("12.说明新建一个GIT功能分支的步骤，提供每个步骤的指令，并对指令进行说明")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git branch name     创建名字为name的branch")]),t._v(" "),e("p",[t._v("git checkout xxx_dev    切换到名字为xxx_dev的分支")]),t._v(" "),e("p",[t._v("git pull    从远程分支拉取代码到本地分支")]),t._v(" "),e("p",[t._v("git checkout -b main_furture_xxx    创建并切换到main_furture_xxx")]),t._v(" "),e("p",[t._v("git push origin main_furture_xxx    执行推送的操作，完成本地分支向远程分支的同步")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1008",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("13.说明git合并的两种方法以及区别")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git代码合并有两种：git Merge 和 git ReBase")]),t._v(" "),e("p",[t._v("Git Merge：这种合并方式是将两个分支的历史合并到一起，现在的分支不会被更改，它会比对双方不同的文件缓存下来，生成一个commit，去push。")]),t._v(" "),e("p",[t._v("Git ReBase：这种合并方法通常被称为“衍合”。他是提交修改历史，比对双方的commit，然后找出不同的去缓存，然后去push，修改commit历史。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1009",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("14.如何查看文件的提交历史和分支的提交历史")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("使用git log查看文件提交历史")]),t._v(" "),e("p",[t._v("git log filename")]),t._v(" "),e("p",[t._v("使用git log查看分支提交历史")]),t._v(" "),e("p",[t._v("git log branch file")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1010",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("15.当GIT出现如下情况时，该如何处理？")])]),t._v(" "),e("h2",{attrs:{id:"your-branch-is-ahead-of-origin-master-by-3-commits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#your-branch-is-ahead-of-origin-master-by-3-commits"}},[t._v("#")]),t._v(" your-branch-is-ahead-of-origin-master-by-3-commits")]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("Git commit")]),t._v(" "),e("p",[t._v("Git pull")]),t._v(" "),e("p",[t._v("Git push")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("16.如何从 git 中删除文件，而不将其从文件系统中删除？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("如果你在 git add 过程中误操作，你最终会添加不想提交的文件。但是，git rm 则会把你的文件从你暂存区（索引）和文件系统（工作树）中删除，这可能不是你想要的。")]),t._v(" "),e("p",[t._v("换成 git reset 操作：")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset filename          # or\necho filename >> .gitingore # add it to .gitignore to avoid re-adding it\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("上面意思是，"),e("code",[t._v("git reset <paths>")]),t._v(" 是 "),e("code",[t._v("git add <paths>")]),t._v(" 的逆操作")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("17.什么时候应使用 “git stash”？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("git stash 命令把你未提交的修改（已暂存（staged）和未暂存的（unstaged））保存以供后续使用，以后就可以从工作副本中进行还原。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("18.你能解释下 Gitflow 工作流程吗？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("p",[t._v("Gitflow 工作流程使用两个并行的、长期运行的分支来记录项目的历史记录，分别是 master 和 develop 分支。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Master，随时准备发布线上版本的分支，其所有内容都是经过全面测试和核准的（生产就绪）。\nHotfix，维护（maintenance）或修复（hotfix）分支是用于给快速给生产版本修复打补丁的。修复（hotfix）分支很像发布（release）分支和功能（feature）分支，除非它们是基于 master 而不是 develop 分支。")])]),t._v(" "),e("li",[e("p",[t._v("Develop，是合并所有功能（feature）分支，并执行所有测试的分支。只有当所有内容都经过彻底检查和修复后，才能合并到 master 分支。\nFeature，每个功能都应留在自己的分支中开发，可以推送到 develop 分支作为功能（feature）分支的父分支。")])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("19.Git 中 HEAD、工作树和索引之间的区别？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("ul",[e("li",[t._v("该工作树/工作目录/工作空间是你看到和编辑的（源）文件的目录树。")]),t._v(" "),e("li",[t._v("该索引/中转区（staging area）是个在 /.git/index，单一的、庞大的二进制文件，该文件列出了当前分支中所有文件的 SHA1 检验和、时间戳和文件名，它不是个带有文件副本的目录。")]),t._v(" "),e("li",[t._v("HEAD是当前检出分支的最后一次提交的引用/指针。")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[e("b",[t._v("20.解释 Forking 工作流程的优点？")])]),t._v(" "),e("p",[t._v("答案：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Forking 工作流程 与其他流行的 Git 工作流程有着根本的区别。它不是用单个服务端仓库充当“中央”代码库，而是为每个开发者提供自己的服务端仓库。Forking 工作流程最常用于公共开源项目中。")])]),t._v(" "),e("li",[e("p",[t._v("Forking 工作流程的主要优点是可以汇集提交贡献，又无需每个开发者提交到一个中央仓库中，从而实现干净的项目历史记录。开发者可以推送（push）代码到自己的服务端仓库，而只有项目维护人员才能直接推送（push）代码到官方仓库中。")])]),t._v(" "),e("li",[e("p",[t._v("当开发者准备发布本地提交时，他们的提交会推送到自己的公共仓库中，而不是官方仓库。然后他们向主仓库提交请求拉取（pull request），这会告知项目维护人员有可以集成的更新。")])])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/yisainan/web-interview/issues/1011",target:"_blank",rel:"noopener noreferrer"}},[t._v("参与互动"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);